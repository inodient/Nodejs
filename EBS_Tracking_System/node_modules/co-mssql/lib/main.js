// Generated by CoffeeScript 1.10.0
(function() {
  var Connection, PreparedStatement, Request, Transaction, key, mssql, ref, value,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  mssql = require('mssql');

  Connection = (function(superClass) {
    extend(Connection, superClass);


    /*
    	Create new Connection.
    	
    	@param {Object} config Connection configuration.
     */

    function Connection(config) {
      Connection.__super__.constructor.call(this, config);
    }


    /*
    	Initializes driver for this connection.
    	
    	@param {Function} driver Loaded driver.
    	
    	@returns {Connection}
     */

    Connection.prototype.initializeDriver = function(driver) {
      return driver(Connection, Transaction, Request, mssql.ConnectionError, mssql.TransactionError, mssql.RequestError);
    };


    /*
    	Thunkified version of connect method.
    	
    	@returns {Function}
     */

    Connection.prototype.connect = function() {
      return (function(_this) {
        return function(callback) {
          return Connection.__super__.connect.call(_this, callback);
        };
      })(this);
    };


    /*
    	Returns new request using this connection.
    	
    	@returns {Request}
     */

    Connection.prototype.request = function() {
      return new Request(this);
    };


    /*
    	Returns new transaction using this connection.
    	
    	@returns {Transaction}
     */

    Connection.prototype.transaction = function() {
      return new Transaction(this);
    };

    return Connection;

  })(mssql.Connection);

  PreparedStatement = (function(superClass) {
    extend(PreparedStatement, superClass);


    /*
    	Create new PreparedStatement.
    	
    	@param {Connection|Transaction} connection If ommited, global connection is used instead.
     */

    function PreparedStatement(connection) {
      PreparedStatement.__super__.constructor.call(this, connection);
    }


    /*
    	Thunkified version of prepare method.
     */

    PreparedStatement.prototype.prepare = function(statement) {
      return (function(_this) {
        return function(callback) {
          return PreparedStatement.__super__.prepare.call(_this, statement, callback);
        };
      })(this);
    };


    /*
    	Thunkified version of execute method.
     */

    PreparedStatement.prototype.execute = function(values) {
      return (function(_this) {
        return function(callback) {
          return PreparedStatement.__super__.execute.call(_this, values, function(err, result) {
            return callback(err, result);
          });
        };
      })(this);
    };


    /*
    	Thunkified version of rollback method.
     */

    PreparedStatement.prototype.unprepare = function() {
      return (function(_this) {
        return function(callback) {
          return PreparedStatement.__super__.unprepare.call(_this, callback);
        };
      })(this);
    };

    return PreparedStatement;

  })(mssql.PreparedStatement);

  Transaction = (function(superClass) {
    extend(Transaction, superClass);


    /*
    	Create new Transaction.
    	
    	@param {Connection} connection If ommited, global connection is used instead.
     */

    function Transaction(connection) {
      Transaction.__super__.constructor.call(this, connection);
    }


    /*
    	Thunkified version of begin method.
     */

    Transaction.prototype.begin = function() {
      return (function(_this) {
        return function(callback) {
          return Transaction.__super__.begin.call(_this, callback);
        };
      })(this);
    };


    /*
    	Thunkified version of commit method.
     */

    Transaction.prototype.commit = function() {
      return (function(_this) {
        return function(callback) {
          return Transaction.__super__.commit.call(_this, callback);
        };
      })(this);
    };


    /*
    	Returns new request using this transaction.
    	
    	@returns {Request}
     */

    Transaction.prototype.request = function() {
      return new Request(this);
    };


    /*
    	Thunkified version of rollback method.
     */

    Transaction.prototype.rollback = function() {
      return (function(_this) {
        return function(callback) {
          return Transaction.__super__.rollback.call(_this, callback);
        };
      })(this);
    };

    return Transaction;

  })(mssql.Transaction);

  Request = (function(superClass) {
    extend(Request, superClass);


    /*
    	Create new Request.
    	
    	@param {Request|Transaction} connection If ommited, global connection is used instead.
     */

    function Request(connection) {
      Request.__super__.constructor.call(this, connection);
    }


    /*
    	Thunkified version of bulk method.
    	
    	@returns {Function}
     */

    Request.prototype.bulk = function(table) {
      return (function(_this) {
        return function(callback) {
          return Request.__super__.bulk.call(_this, table, function(err, result) {
            return callback(err, result);
          });
        };
      })(this);
    };


    /*
    	Thunkified version of batch method.
    	
    	@returns {Function}
     */

    Request.prototype.batch = function(batch) {
      return (function(_this) {
        return function(callback) {
          return Request.__super__.batch.call(_this, batch, function(err, result) {
            return callback(err, result);
          });
        };
      })(this);
    };


    /*
    	Thunkified version of query method.
    	
    	@returns {Function}
     */

    Request.prototype.query = function(command) {
      return (function(_this) {
        return function(callback) {
          return Request.__super__.query.call(_this, command, function(err, result) {
            return callback(err, result);
          });
        };
      })(this);
    };


    /*
    	Thunkified version of execute method.
    	
    	@returns {Function}
     */

    Request.prototype.execute = function(procedure) {
      return (function(_this) {
        return function(callback) {
          return Request.__super__.execute.call(_this, procedure, function(err, result) {
            return callback(err, result);
          });
        };
      })(this);
    };

    return Request;

  })(mssql.Request);


  /*
   */

  module.exports.connect = function(config) {
    return function(callback) {
      return mssql.connect(config, callback);
    };
  };


  /*
   */

  module.exports.close = function() {
    return mssql.close();
  };

  module.exports.on = function() {
    return mssql.on.apply(mssql, arguments);
  };

  module.exports.Connection = Connection;

  module.exports.Transaction = Transaction;

  module.exports.Request = Request;

  module.exports.Table = mssql.Table;

  module.exports.PreparedStatement = PreparedStatement;

  module.exports.ConnectionError = mssql.ConnectionError;

  module.exports.TransactionError = mssql.TransactionError;

  module.exports.RequestError = mssql.RequestError;

  module.exports.PreparedStatementError = mssql.PreparedStatementError;

  module.exports.ISOLATION_LEVEL = mssql.ISOLATION_LEVEL;

  module.exports.DRIVERS = mssql.DRIVERS;

  module.exports.TYPES = mssql.TYPES;

  module.exports.MAX = mssql.MAX;

  module.exports.map = mssql.map;

  Object.defineProperty(module.exports, "fix", {
    get: function() {
      return mssql.fix;
    },
    set: function(value) {
      return mssql.fix = value;
    }
  });

  Object.defineProperty(module.exports, 'Promise', {
    get: function() {
      return mssql.Promise;
    },
    set: function(value) {
      return mssql.Promise = value;
    }
  });

  ref = mssql.TYPES;
  for (key in ref) {
    value = ref[key];
    module.exports[key] = value;
    module.exports[key.toUpperCase()] = value;
  }

}).call(this);
